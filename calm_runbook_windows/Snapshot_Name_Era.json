{"status":{},"contains_secrets":false,"product_version":"3.2.2","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"credential_definition_list":[{"username":"Administrator","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"Administrator"}],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"FiestaDB registered"},{"kind":"app_task","name":"Create Era Snapshot"}],"name":"c069fe02_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"FiestaDB registered"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Era Snapshot"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"FiestaDB registered","attrs":{"failure_child_reference":{"kind":"app_task","name":"d7c962f4_FAILURE_META"},"exit_status":[],"script":"# Set the vars needed by the Calm Runbook variables\n$era_ip=\"@@{era_ip}@@\"\n$era_user=\"@@{era_user}@@\"\n$era_passwd=\"@@{era_password}@@\"\n$initials=\"@@{initials}@@\"\n\n$host_ip=(Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias Ethernet).IPaddress\n\n\n$Header=@{\"Authorization\" = \"Basic \"+[System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($era_user+\":\"+$era_passwd));}\n\n# Getting the HTTPS working with self-signed certificates\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n\n\n# Get the list of the DBservers that are registered\n$APIParams = @{\n        method=\"GET\"\n        Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/databases\"\n        ContentType=\"application\/json\"\n        Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n\nif ($response.name -NotMatch \"$initials-FiestaDB-Win\"){\n    exit 1\n}else{\n    exit 0\n}","login_credential_local_reference":{"kind":"app_credential","name":"Administrator"},"success_child_reference":{"kind":"app_task","name":"b0943864_SUCCESS_META"},"type":"","command_line_args":"","script_type":"npsscript"},"timeout_secs":"0","type":"DECISION","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Found FiestaDB in Era"}],"name":"b0943864_SUCCESS_META","attrs":{"type":""},"timeout_secs":"0","type":"META","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Found FiestaDB-Win in Era","attrs":{"exit_status":[],"script":"Write-Host \"Found @@{initials}@@-FiestaDB-Win in Era\"","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Register FiestaDB"}],"name":"d7c962f4_FAILURE_META","attrs":{"type":""},"timeout_secs":"0","type":"META","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Register FiestaDB","attrs":{"exit_status":[],"script":"# Set the vars needed by the Calm Runbook variables\n$era_ip=\"@@{era_ip}@@\"\n$era_user=\"@@{era_user}@@\"\n$era_passwd=\"@@{era_password}@@\"\n$initials=\"@@{initials}@@\"\n\n$host_ip=(Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias Ethernet).IPaddress\n\n\n$Header=@{\"Authorization\" = \"Basic \"+[System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($era_user+\":\"+$era_passwd));}\n\n# Getting the HTTPS working with self-signed certificates\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n\nWrite-Host \"Our FiestaDB has not been found in Era\"\nWrite-Host \"Registering the FiestaDB in Era\"\n\n# Get the Era cluster ID\n$APIParams = @{\n    method=\"GET\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/clusters\"\n    ContentType=\"application\/json\"\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$cluster_uuid=($response | where-object {$_.name -Match \"EraCluster\"}).id\n\n# Get the UUID of the Bronze SLA\n$APIParams = @{\n    method=\"GET\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/slas\"\n    ContentType=\"application\/json\"\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$sla_uuid=($response | where-object {$_.name -Match \"DEFAULT_OOB_BRONZE_SLA\"}).id\n\n\n# Build the payload json for Era\n$Payload=@\"\n{\n\"actionArguments\": [\n{\n    \"name\": \"era_manage_log\",\n    \"value\": true\n},\n{\n    \"name\": \"sql_login_used\",\n    \"value\": false\n},\n{\n    \"name\": \"same_as_admin\",\n    \"value\": true\n},\n{\n    \"name\": \"recovery_model\",\n    \"value\": \"Full-logged\"\n},\n{\n    \"name\": \"vmIp\",\n    \"value\": \"10.38.20.59\"\n},\n{\n    \"name\": \"sysadmin_username_win\",\n    \"value\": \"Administrator\"\n},\n{\n    \"name\": \"sysadmin_password_win\",\n    \"value\": \"Nutanix\/4u\"\n},\n{\n    \"name\": \"instance_name\",\n    \"value\": \"MSSQLSERVER\"\n},\n{\n    \"name\": \"database_name\",\n    \"value\": \"FiestaDB\"\n}\n],\n\"nxClusterId\": \"$cluster_uuid\",\n\"databaseType\": \"sqlserver_database\",\n\"databaseName\": \"$initials-FiestaDB-Win\",\n\"description\": \"\",\n\"clustered\": false,\n\"forcedInstall\": true,\n\"category\": \"DEFAULT\",\n\"vmIp\": \"$host_ip\",\n\"vmUsername\": \"Administrator\",\n\"vmPassword\": \"Nutanix\/4u\",\n\"vmSshkey\": \"\",\n\"vmDescription\": \"\",\n\"autoTuneStagingDrive\": false,\n\"workingDirectory\": \"c:\\\\\",\n\"timeMachineInfo\": {\n\"autoTuneLogDrive\": true,\n\"slaId\": \"$sla_uuid\",\n\"schedule\": {\n    \"snapshotTimeOfDay\": {\n    \"hours\": 1,\n    \"minutes\": 0,\n    \"seconds\": 0\n    },\n    \"continuousSchedule\": {\n    \"enabled\": true,\n    \"logBackupInterval\": 30,\n    \"snapshotsPerDay\": 1\n    },\n    \"weeklySchedule\": {\n    \"enabled\": true,\n    \"dayOfWeek\": \"MONDAY\"\n    },\n    \"monthlySchedule\": {\n    \"enabled\": true,\n    \"dayOfMonth\": \"17\"\n    },\n    \"quartelySchedule\": {\n    \"enabled\": true,\n    \"startMonth\": \"JANUARY\",\n    \"dayOfMonth\": \"17\"\n    },\n    \"yearlySchedule\": {\n    \"enabled\": false,\n    \"dayOfMonth\": 31,\n    \"month\": \"DECEMBER\"\n    }\n},\n\"tags\": [],\n\"name\": \"xyz-FiestaDB-Win_TM\"\n},\n\"tags\": []\n}\n\"@\n# Register the Database of initials-FiestaDB-Win\n$APIParams = @{\n    method=\"POST\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/databases\/register\"\n    ContentType=\"application\/json\"\n    Body=$Payload\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$operation_id=$response.operationId\n\n# Small loop so we wait for the registration to happen\n$APIParams = @{\n    method=\"GET\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/operations\/\"+$operation_id\n    ContentType=\"application\/json\"\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$counter=0\nwhile ($response.status -le 4){\n    Write-Host \"Registration is still in progress.. Sleeping 1 minute before retrying ($counter\/15).\"\n    start-sleep 60\n    if ($counter -lt 15){\n        $response=(Invoke-RestMethod @APIParams)\n    }else{\n        Write-Host \"We waited 15 minutes and the Database has not been registered. Exiting...\"\n        exit 1\n    }\n    $counter++\n}\nif ($response.status -eq 5){\n    Write-Host \"Registration has been successfull.\"\n    exit 0\n}else{\n    Write-Host \"Registration has not been successfull. Exiting\"\n    exit 1\n}","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Era Snapshot","attrs":{"exit_status":[],"script":"# Set the vars needed by the Calm Runbook variables\n$era_ip=\"@@{era_ip}@@\"\n$era_user=\"@@{era_user}@@\"\n$era_passwd=\"@@{era_password}@@\"\n$initials=\"@@{initials}@@\"\n$snapshot_name=\"@@{snapshotname}@@\"\n\n$Header=@{\"Authorization\" = \"Basic \"+[System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($era_user+\":\"+$era_passwd));}\n\n# Getting the HTTPS working with self-signed certificates\nadd-type @\"\n    using System.Net;\n    using System.Security.Cryptography.X509Certificates;\n    public class TrustAllCertsPolicy : ICertificatePolicy {\n        public bool CheckValidationResult(\n            ServicePoint srvPoint, X509Certificate certificate,\n            WebRequest request, int certificateProblem) {\n            return true;\n        }\n    }\n\"@\n[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy\n\nWrite-Host \"Creating snapshot FirstSnapshot_Runbook for $initials-FiestaDB-Win\"\n\n# Get the TMS ID of the FiestaDB Time Machine\n$APIParams = @{\n    method=\"GET\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/tms\"\n    ContentType=\"application\/json\"\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$tms_uuid=($response | where-object {$_.name -Match \"$initials-FiestaDB-Win_TM\"}).id\n\n# Build the Paylod\n$Payload=@\"\n{\n    \"name\":\"$snapshot_name\"\n}\n\"@\n\n$APIParams = @{\n    method=\"POST\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/tms\/\"+$tms_uuid+\"\/snapshots\"\n    ContentType=\"application\/json\"\n    Body=$Payload\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$operation_id=$response.operationId\nwrite-host \"OperationID is $operation_id\"\n\n# Give Era some time to start the process\nStart-Sleep 30 \n\n# Small loop so we wait for the snapshot to happen\n$APIParams = @{\n    method=\"GET\"\n    Uri=\"https:\/\/\"+$era_ip+\"\/era\/v0.9\/operations\/\"+$operation_id\n    ContentType=\"application\/json\"\n    Header = $Header\n}\ntry{\n    $response=(Invoke-RestMethod @APIParams)\n}catch{\n    sleep 10 # Sleeping 3 minutes before progressing\n    $response=(Invoke-RestMethod @APIParams)\n}\n$counter=0\nwhile ($response.status -eq 1){\n    Write-Host \"Snapshot creation is still in progress.. Sleeping 1 minute before retrying ($counter\/15).\"\n    start-sleep 60\n    if ($counter -lt 15){\n        $response=(Invoke-RestMethod @APIParams)\n    }else{\n        Write-Host \"We waited 15 minutes and the Snapshot creation has not succeeded. Exiting...\"\n        exit 1\n    }\n    $counter++\n}\nif ($response.status -eq 5){\n    Write-Host \"Snapshot creation has been successfull.\"\n    exit 0\n}else{\n    Write-Host \"Snapshot creation has not been successfull. Exiting\"\n    exit 1\n}","script_type":"npsscript","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"Administrator"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dfc87fa5_runbook","main_task_local_reference":{"kind":"app_task","name":"c069fe02_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"era_user","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"era_password","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"era_ip","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"initials","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"snapshotname","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"client_attrs":{},"default_target_reference":{"kind":"app_endpoint","name":"xyz-mssql"}},"name":"xyz-Create MSSQL Snapshot"},"api_version":"3.0","metadata":{"last_update_time":"1621331220770433","kind":"runbook","spec_version":5,"creation_time":"1621322540143219","name":"xyz-Create MSSQL Snapshot"}}